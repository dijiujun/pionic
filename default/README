Default fixture driver.

CGIs in this directory are accessed via http on port 80 withn URL in the
general form:

    http://ip.ad.re.ss/cginame[?options[&...options]]

This URL executes the file "cginame.cgi" with the options passed on the command
line.

These CGIs are defined:

test

    Just returns the current CGI environment.

    Example:

    $ curl -qf http://192.168.111.1/test
    BASH=/bin/bash
    BASHOPTS=cmdhist:complete_fullquote:extquote:force_fignore:hostcomplete:interactive_comments:progcomp:promptvars:sourcepath
    BASH_ALIASES=()
    BASH_ARGC=([0]="1")
    ...

display

    Write to the test station display. No text is returned. The first option must be a command:

        clear       - clear the screen to specified background color
        image       - display image posted on stdin, or colorbars if none
        text        - clear display to bg color and write posted text with fg
                      color (posted on stdin)

    Other options are:

        fg=color    - define foreground color text, default white.
        bg=color    - define background color for clear, image, or text,
                      default "black". Note if "transparent" text will overlay
                      existing display.
        size=N      - number of visible text columns, default is 42.
        align=dir   - screen text alignment, one of: nw, n, ne, w, c, e, sw, s,
                      or se. Default "nw".
        badge       - short for "size=24 align=c wrap=1"
        wrap        - set to 1 to automatically wrap text to specified size. Default 0.

    Example:

        # Show arbitrary text
        $ cat file.txt | curl --data-binary @- -qf 'https://192.168.111.1/display?text&wrap=1'

        # show a status message
        $ echo TEST PASS | curl --data-binary @- -qf 'https://192.168.111.1/display?badge&bg=white&fg=green'

        # Show an arbitrary image
        $ curl --binary-data @image.png -qf 'https://192.168.111.1/display?image&bg=white'

        # Show stock colorbars
        $ curl -qf 'https://192./168.111.1/display?image'

factory

    Return the factory server address and CGI port. This is the mechanism used
    by DUT to determine that it is, in fact, in the factory environment.

    Example:

        $ curl -qf 'https://192./168.111.1/factory'
        10.1.2.3:443

gpio

    Control GPIOs on the test controller.

    Options are:

        G=0         - enable gpio G and set it to output low
        G=1         - enable gpio G and set to output high
        G=in        - enable gpio G and set it as an input
        G=reset     - disable gpio G (so no longer owned by sysfs)
        reset       - disable all gpios

    Where G is the gpio number 4 to 27. After all options are processed (if
    any), list the current state of all enabled gpios.

    Example:

        $ curl -qf 'http://192.168.111.1/gpio?6=1'
        6: out 1

        $ curl -qf 'http://192.168.111.1/gpio?7=in'
        6: out 1
        7: in 1

        $ curl -qf 'http://192.168.111.1/gpio'
        6: out 1
        7: in 1

hdmi

    Write image to HDMI.

    Options are:

        timeout=X - display time in seconds, default is 0 and image will persist until changed.

    Example:

        $ curl --binary-data @image.png -qf 'https://192.168.111.1/hdmi'

mkfm

    Trigger FM signal generation on GPIO 4. Returns transmit status message.

    Options are:

        freq=XXX.X  - transmit frequency in MHz, 88.1 to 107.9, default is 99.9
        tone=X      - modulation frequency in Hz, 10-8000, default is 1000
        time=X      - transmit time in seconds, 0-120, default is 30. 0 just
                      kills the current transmission.

    Example:

        $ curl -qf 'http://192.168.111.1/mkfm?freq=100&time=5'
        Transmitting 1000 Hz on 100 MHz FM for 5 seconds

random

    Returns a hexadecimal string of random bytes.

    The number of bytes can be specified as an option, default is 32.

    Example, add 4096 bits of entropy to DUT's RNG (Linux only):

        $ curl -qf 'http://192./168.111.1/random?512 > /dev/random

time

    Return the controller's current time in epoch seconds and format MMDDhhmmYYYY.SS (in UCT).

    Example:

         $ curl -qf http://192.168.111.1/time
         1554235513 200504022019.13
